---
import mdxRenderer from "@astrojs/mdx/server.js"
import reactRenderer from "@astrojs/react/server.js"
import { experimental_AstroContainer } from "astro/container"
import { render } from "astro:content"
import { format } from "date-fns"
import { convert as htmlToText } from "html-to-text"
import { chunk } from "lodash-es"

import { Comments } from "@/components/client"
import Layout from "@/layouts/Layout.astro"
import { getCommentCounts } from "@/lib"
import { getPosts } from "@/lib/server"

import "./_comentario.pcss"

export async function getStaticPaths() {
  const posts = await getPosts()

  const allPaths = posts.map((post) => `/${post.id}/`)

  let commentCounts = {}

  if (!Astro.site) {
    throw new Error("Astro.site is undefined")
  }

  for (const pathsChunk of chunk(allPaths, 32)) {
    const chunkCommentCounts = await getCommentCounts(
      Astro.site.host,
      pathsChunk,
    )
    commentCounts = { ...commentCounts, ...chunkCommentCounts }
  }

  return posts.map((post, index) => {
    const previousPost = posts[index - 1]
    const nextPost = posts[index + 1]

    return {
      params: {
        slug: post.id,
      },
      props: {
        commentCounts,
        post,
        index,
        previous: previousPost
          ? { ...previousPost, url: `/${previousPost.id}/` }
          : undefined,
        next: nextPost ? { ...nextPost, url: `/${nextPost.id}/` } : undefined,
      },
    }
  })
}

const { commentCounts, index, next, post, previous } = Astro.props

const homePageNumber = Math.floor(index / 20) + 1
const homePagePath = homePageNumber == 1 ? "/" : `/${homePageNumber}/`

const { Content } = await render(post)

const container = await experimental_AstroContainer.create()
container.addServerRenderer({ renderer: mdxRenderer, name: "MDX" })
container.addServerRenderer({ renderer: reactRenderer, name: "react" })

const postHtml = await container.renderToString(Content)
const postText = htmlToText(postHtml, { wordwrap: false })
const readingTime = Math.max(
  1,
  Math.round(postText.trim().split(/\s+/).length / 238),
)
---

<Layout
  description={post.data.description || post.data.excerpt}
  image={post.data.image}
  ogPublishedTime={post.data.date}
  ogType="article"
  postReturnUrl={`${homePagePath}#${post.id}`}
  title={post.data.title}
  width={post.data.width}
>
  <div class="post-header section">
    <div class="container">
      <h1>{post.data.title}</h1>
      <p class="date-reading-time">
        <time datetime={post.data.date.toISOString()}>
          {format(post.data.date, "d MMMM yyyy")}
        </time><span class="bullet"> â€¢ </span><span>{readingTime} min read</span
        >
      </p>
    </div>
  </div>
  <div class="section">
    <div class="container content">
      <Content />
      <Comments
        client:load
        initialCommentCounts={commentCounts}
        pathname={Astro.url.pathname}
      />
      <div class="prev-next-links no-print">
        {
          previous && (
            <a href={previous.url}>
              <i aria-hidden="true" class="fa-solid fa-arrow-left" />
              {previous.data.title}
            </a>
          )
        }
        {!previous && <span />}
        {!next && <span />}
        {
          next && (
            <a class="next-page" href={next.url}>
              {next.data.title}
              <i aria-hidden="true" class="fa-solid fa-arrow-right" />
            </a>
          )
        }
      </div>
    </div>
  </div>
</Layout>

<style>
  .post-header {
    background: var(--nav-background);
    padding: 1.25rem 1rem 1.5rem;

    @media (min-width: calc(700px + 3rem)) {
      padding: 2rem 1.5rem 2rem;
    }
  }

  .date-reading-time {
    font-family: var(--monospace-font-family);
    font-weight: 500;
    color: var(--text-colour);
    margin: 1.25rem 0 0;
  }

  .content {
    font-family: var(--serif-font-family);

    :global(h1),
    :global(h2),
    :global(h3),
    :global(h4) {
      font-family: var(--sans-serif-font-family);
    }
  }

  .bullet {
    margin: 0 0.2rem;
  }

  .prev-next-links {
    display: grid;
    column-gap: 1rem;
    row-gap: 1.1rem;
    margin-top: 2rem;

    a {
      font-family: var(--sans-serif-font-family);
    }

    > span {
      display: block;
      visibility: hidden;
    }

    > a {
      display: flex;
      align-items: center;
      column-gap: 0.55rem;
      padding: 0.75rem 1rem;
      line-height: 1.65;
      background: var(--post-navigation-background);
      border-radius: 6px;

      @media (min-width: calc(700px + 3rem)) {
        padding: 1rem;
      }

      &,
      i {
        text-decoration: none;
      }

      &:hover {
        background: var(--post-navigation-background-hover);
        text-decoration: none;
      }
    }

    .next-page {
      justify-content: right;
      text-align: right;
    }
  }
</style>

<script is:inline src="https://comments.yuo.be/comentario.js" defer></script>
